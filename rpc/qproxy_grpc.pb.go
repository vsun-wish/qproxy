// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QProxyClient is the client API for QProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QProxyClient interface {
	ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (QProxy_ListQueuesClient, error)
	GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*GetQueueResponse, error)
	CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error)
	DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteQueueResponse, error)
	ModifyQueue(ctx context.Context, in *ModifyQueueRequest, opts ...grpc.CallOption) (*ModifyQueueResponse, error)
	PurgeQueue(ctx context.Context, in *PurgeQueueRequest, opts ...grpc.CallOption) (*PurgeQueueResponse, error)
	AckMessages(ctx context.Context, in *AckMessagesRequest, opts ...grpc.CallOption) (*AckMessagesResponse, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	PublishMessages(ctx context.Context, in *PublishMessagesRequest, opts ...grpc.CallOption) (*PublishMessagesResponse, error)
	ModifyAckDeadline(ctx context.Context, in *ModifyAckDeadlineRequest, opts ...grpc.CallOption) (*ModifyAckDeadlineResponse, error)
	Healthcheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error)
}

type qProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewQProxyClient(cc grpc.ClientConnInterface) QProxyClient {
	return &qProxyClient{cc}
}

func (c *qProxyClient) ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (QProxy_ListQueuesClient, error) {
	stream, err := c.cc.NewStream(ctx, &QProxy_ServiceDesc.Streams[0], "/rpc.QProxy/ListQueues", opts...)
	if err != nil {
		return nil, err
	}
	x := &qProxyListQueuesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QProxy_ListQueuesClient interface {
	Recv() (*ListQueuesResponse, error)
	grpc.ClientStream
}

type qProxyListQueuesClient struct {
	grpc.ClientStream
}

func (x *qProxyListQueuesClient) Recv() (*ListQueuesResponse, error) {
	m := new(ListQueuesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qProxyClient) GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*GetQueueResponse, error) {
	out := new(GetQueueResponse)
	err := c.cc.Invoke(ctx, "/rpc.QProxy/GetQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error) {
	out := new(CreateQueueResponse)
	err := c.cc.Invoke(ctx, "/rpc.QProxy/CreateQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteQueueResponse, error) {
	out := new(DeleteQueueResponse)
	err := c.cc.Invoke(ctx, "/rpc.QProxy/DeleteQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) ModifyQueue(ctx context.Context, in *ModifyQueueRequest, opts ...grpc.CallOption) (*ModifyQueueResponse, error) {
	out := new(ModifyQueueResponse)
	err := c.cc.Invoke(ctx, "/rpc.QProxy/ModifyQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) PurgeQueue(ctx context.Context, in *PurgeQueueRequest, opts ...grpc.CallOption) (*PurgeQueueResponse, error) {
	out := new(PurgeQueueResponse)
	err := c.cc.Invoke(ctx, "/rpc.QProxy/PurgeQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) AckMessages(ctx context.Context, in *AckMessagesRequest, opts ...grpc.CallOption) (*AckMessagesResponse, error) {
	out := new(AckMessagesResponse)
	err := c.cc.Invoke(ctx, "/rpc.QProxy/AckMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, "/rpc.QProxy/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) PublishMessages(ctx context.Context, in *PublishMessagesRequest, opts ...grpc.CallOption) (*PublishMessagesResponse, error) {
	out := new(PublishMessagesResponse)
	err := c.cc.Invoke(ctx, "/rpc.QProxy/PublishMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) ModifyAckDeadline(ctx context.Context, in *ModifyAckDeadlineRequest, opts ...grpc.CallOption) (*ModifyAckDeadlineResponse, error) {
	out := new(ModifyAckDeadlineResponse)
	err := c.cc.Invoke(ctx, "/rpc.QProxy/ModifyAckDeadline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) Healthcheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error) {
	out := new(HealthcheckResponse)
	err := c.cc.Invoke(ctx, "/rpc.QProxy/Healthcheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QProxyServer is the server API for QProxy service.
// All implementations should embed UnimplementedQProxyServer
// for forward compatibility
type QProxyServer interface {
	ListQueues(*ListQueuesRequest, QProxy_ListQueuesServer) error
	GetQueue(context.Context, *GetQueueRequest) (*GetQueueResponse, error)
	CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error)
	DeleteQueue(context.Context, *DeleteQueueRequest) (*DeleteQueueResponse, error)
	ModifyQueue(context.Context, *ModifyQueueRequest) (*ModifyQueueResponse, error)
	PurgeQueue(context.Context, *PurgeQueueRequest) (*PurgeQueueResponse, error)
	AckMessages(context.Context, *AckMessagesRequest) (*AckMessagesResponse, error)
	GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error)
	PublishMessages(context.Context, *PublishMessagesRequest) (*PublishMessagesResponse, error)
	ModifyAckDeadline(context.Context, *ModifyAckDeadlineRequest) (*ModifyAckDeadlineResponse, error)
	Healthcheck(context.Context, *HealthcheckRequest) (*HealthcheckResponse, error)
}

// UnimplementedQProxyServer should be embedded to have forward compatible implementations.
type UnimplementedQProxyServer struct {
}

func (UnimplementedQProxyServer) ListQueues(*ListQueuesRequest, QProxy_ListQueuesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListQueues not implemented")
}
func (UnimplementedQProxyServer) GetQueue(context.Context, *GetQueueRequest) (*GetQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueue not implemented")
}
func (UnimplementedQProxyServer) CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedQProxyServer) DeleteQueue(context.Context, *DeleteQueueRequest) (*DeleteQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}
func (UnimplementedQProxyServer) ModifyQueue(context.Context, *ModifyQueueRequest) (*ModifyQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyQueue not implemented")
}
func (UnimplementedQProxyServer) PurgeQueue(context.Context, *PurgeQueueRequest) (*PurgeQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeQueue not implemented")
}
func (UnimplementedQProxyServer) AckMessages(context.Context, *AckMessagesRequest) (*AckMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckMessages not implemented")
}
func (UnimplementedQProxyServer) GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedQProxyServer) PublishMessages(context.Context, *PublishMessagesRequest) (*PublishMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessages not implemented")
}
func (UnimplementedQProxyServer) ModifyAckDeadline(context.Context, *ModifyAckDeadlineRequest) (*ModifyAckDeadlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyAckDeadline not implemented")
}
func (UnimplementedQProxyServer) Healthcheck(context.Context, *HealthcheckRequest) (*HealthcheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthcheck not implemented")
}

// UnsafeQProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QProxyServer will
// result in compilation errors.
type UnsafeQProxyServer interface {
	mustEmbedUnimplementedQProxyServer()
}

func RegisterQProxyServer(s grpc.ServiceRegistrar, srv QProxyServer) {
	s.RegisterService(&QProxy_ServiceDesc, srv)
}

func _QProxy_ListQueues_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListQueuesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QProxyServer).ListQueues(m, &qProxyListQueuesServer{stream})
}

type QProxy_ListQueuesServer interface {
	Send(*ListQueuesResponse) error
	grpc.ServerStream
}

type qProxyListQueuesServer struct {
	grpc.ServerStream
}

func (x *qProxyListQueuesServer) Send(m *ListQueuesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _QProxy_GetQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).GetQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/GetQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).GetQueue(ctx, req.(*GetQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/CreateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).CreateQueue(ctx, req.(*CreateQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/DeleteQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).DeleteQueue(ctx, req.(*DeleteQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_ModifyQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).ModifyQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/ModifyQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).ModifyQueue(ctx, req.(*ModifyQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_PurgeQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).PurgeQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/PurgeQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).PurgeQueue(ctx, req.(*PurgeQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_AckMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).AckMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/AckMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).AckMessages(ctx, req.(*AckMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).GetMessages(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_PublishMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).PublishMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/PublishMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).PublishMessages(ctx, req.(*PublishMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_ModifyAckDeadline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyAckDeadlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).ModifyAckDeadline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/ModifyAckDeadline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).ModifyAckDeadline(ctx, req.(*ModifyAckDeadlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthcheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).Healthcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/Healthcheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).Healthcheck(ctx, req.(*HealthcheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QProxy_ServiceDesc is the grpc.ServiceDesc for QProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.QProxy",
	HandlerType: (*QProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQueue",
			Handler:    _QProxy_GetQueue_Handler,
		},
		{
			MethodName: "CreateQueue",
			Handler:    _QProxy_CreateQueue_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _QProxy_DeleteQueue_Handler,
		},
		{
			MethodName: "ModifyQueue",
			Handler:    _QProxy_ModifyQueue_Handler,
		},
		{
			MethodName: "PurgeQueue",
			Handler:    _QProxy_PurgeQueue_Handler,
		},
		{
			MethodName: "AckMessages",
			Handler:    _QProxy_AckMessages_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _QProxy_GetMessages_Handler,
		},
		{
			MethodName: "PublishMessages",
			Handler:    _QProxy_PublishMessages_Handler,
		},
		{
			MethodName: "ModifyAckDeadline",
			Handler:    _QProxy_ModifyAckDeadline_Handler,
		},
		{
			MethodName: "Healthcheck",
			Handler:    _QProxy_Healthcheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListQueues",
			Handler:       _QProxy_ListQueues_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/qproxy.proto",
}
